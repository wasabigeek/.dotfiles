#!/bin/sh

# Init a new MacOS system for web development
# Heavily inspired by: https://github.com/thoughtbot/laptop

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n$fmt\\n" "$@"
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

UNAME_MACHINE="$(/usr/bin/uname -m)"
if [ "$UNAME_MACHINE" = "arm64" ]; then
  # On ARM macOS
  HOMEBREW_PREFIX="/opt/homebrew"
else
  # Intel macOS
  HOMEBREW_PREFIX="/usr/local"
fi

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
fi

update_shell() {
  local shell_path;
  shell_path="$(command -v zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

case "$SHELL" in
  */zsh)
    if [ "$(command -v zsh)" != '/usr/local/bin/zsh' ] ; then
      update_shell
    fi
    ;;
  *)
    update_shell
    ;;
esac

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
  /bin/bash -c \
    "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

  # set Homebrew paths (see install.sh)
  eval "$($HOMEBREW_PREFIX/bin/brew shellenv)"
fi

if brew list | grep -Fq brew-cask; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

fancy_echo "Updating Homebrew formulae ..."
brew update --force # https://github.com/Homebrew/brew/issues/1151
brew install gh
brew install homebrew/cask/docker
brew install visual-studio-code

if ! [ -d ~/.ssh ]; then
  fancy_echo "Generating ssh key ..."
  fancy_echo "What email do you want to use?"
  read EMAIL
  ssh-keygen -t ed25519 -C "$EMAIL"

  if ! [ -f ~/.ssh/config ]; then
    fancy_echo "Creating ssh config file..."
    touch ~/.ssh/config
    echo "Host *" >> ~/.ssh/config
    echo "  AddKeysToAgent yes" >> ~/.ssh/config
    echo "  UseKeychain yes" >> ~/.ssh/config
    echo "  IdentityFile ~/.ssh/id_ed25519" >> ~/.ssh/config
  else
    fancy_echo "ssh config file exists, modify according to https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent"
  fi

  eval "$(ssh-agent -s)"
  ssh-add -K ~/.ssh/id_ed25519

  fancy_echo "Adding your ssh-key to GitHub ..."
  fancy_echo "Authenticating the CLI with GitHub ..."
  # TODO: use refresh with scopes if logged in (`gh auth status`)
  gh auth login --web --scopes write:public_key
  fancy_echo "What do you want to name this key? (e.g. personal laptop)"
  read SSH_KEY_TITLE
  gh ssh-key add ~/.ssh/id_ed25519.pub --title "$SSH_KEY_TITLE"
fi

if ! [ -d ~/dev ]; then
  mkdir ~/dev
  fancy_echo "Download dotfiles ..."
  gh repo clone wasabigeek/dotfiles ~/dev/dotfiles
fi

fancy_echo "Next steps:"
fancy_echo "- Run 'open /Applications/Docker.app' to complete Docker setup."
fancy_echo "- Setup dotfiles."
